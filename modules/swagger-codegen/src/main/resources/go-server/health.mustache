{{>partial_header}}

package service

import (
    "github.com/remitly/tiny-logger-go/log"
    "net/http"
)

type Health interface {
    ReadyHandler() http.Handler
    AliveHandler() http.Handler
}

type BasicHealth struct {
}

// 'ready' indicates that the service is fully up, running, and 'ready' to serve traffic.
// The orchestration layer will *NOT* reap this service if it reports that it is not ready.
func (h BasicHealth) ReadyHandler() http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        log.Errorf("Replace this service ready check with a custom one apropos to your service")
        http.Error(w, http.StatusText(501), 501)
    })
}

// 'alive' indicates that the service process has been instantiated and is running. It does
// not mean that the service is ready to accept traffic, that is what the '/ready' endpoint is
// for. The orchestration layer can and will restart this service instance if it does not
// respond with http.StatusOK.
func (h BasicHealth) AliveHandler() http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Content-Type", "application/json; charset=UTF-8")
        w.WriteHeader(http.StatusOK)
    })
}


