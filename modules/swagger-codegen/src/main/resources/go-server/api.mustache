{{>partial_header}}

package service


{{#operations}}
import (
    "net/http"
)
/*
Notes:

1. Spans

```generated/runtime/routers.go``` wraps each service method in a span.

Example:

Access the span like so...

```
import(
    "github.com/opentracing/opentracing-go"
    "net/http"
)
```


```
func ServiceMethod(w http.ResponseWriter, r *http.Request) {
    span := opentracing.SpanFromContext(r.Context())
    span.SetTag("somekey", "somevalue")
    ...
}
```

2. Context objects

tiny-middleware-go injects various objects into the request context:

Example:

Access the context objects like so...

```
import (
    "github.com/opentracing/opentracing-go"
    "github.com/Remitly/tiny-logger-go/log"
    "github.com/Remitly/tiny-middleware-go/requestcontext/ctxconfig"
    "github.com/Remitly/tiny-middleware-go/requestcontext/ctxservice"
    "github.com/Remitly/tiny-middleware-go/requestcontext/ctxtracer"
    "net/http"
    "{{serviceName}}/generated/config"
)
```

```
func ServiceMethod(w http.ResponseWriter, r *http.Request) {
    safe, err := (&ctxconfig.ContextSafeConfig{}).Retrieve(r.Context())
    if err == nil {
        defaultConfig := safe.Value().(*config.DefaultConfig)
        log.Debugf("defaultConfig: %+v", defaultConfig)
    }

    safe, err = (&ctxservice.ContextSafeService{}).Retrieve(r.Context())
    if err == nil {
        serviceName := safe.Value().(string)
        log.Debugf("serviceName: %s", serviceName)
    }

    safe, err = (&ctxtracer.ContextSafeTracer{}).Retrieve(r.Context())
    if err == nil {
        tracer := safe.Value().(opentracing.Tracer)
        log.Debugf("tracer: %+v", tracer)
    }
    ...
}
```
*/

{{#operation}}

func {{nickname}}(w http.ResponseWriter, r *http.Request) {
    // -----------------------------------------------------
    // domain logic here
    // -----------------------------------------------------
    w.Header().Set("Content-Type", "application/json; charset=UTF-8")
    w.WriteHeader(http.StatusOK)
}{{/operation}}{{/operations}}
