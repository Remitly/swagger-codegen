{{>partial_header}}
package runtime

import (
    "fmt"
    "github.com/bugsnag/bugsnag-go"
    "github.com/gorilla/mux"
    "github.com/jessevdk/go-flags"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promauto"
    "github.com/prometheus/client_golang/prometheus/promhttp"
    "github.com/remitly/tiny-logger-go/log"
    "golang.org/x/net/context"
    "io/ioutil"
    "net/http"
    "os"
    "os/signal"
    "time"

    tinym "github.com/remitly/tiny-middleware-go/middlewares"
    "{{goModule}}/service"
    "{{goModule}}/generated/config"
)

var oasAPI []byte

func init() {
    byteArray, err := ioutil.ReadFile("api.json")
        if err != nil {
        panic("missing api.json")
    }
    oasAPI = byteArray
}

const (
    rateLimitExceededMessage = "RATE LIMIT EXCEEDED"
)


const (
    /*
        Hardcoded values come from infra.

        See: https://prometheus.int.remitly.com/config , where
        this is the relevant snippet that shows how prometheus is
        configured to scrape the services for their metrics:

        - job_name: apps
        metrics_path: /prometheusMetrics
        scheme: http
        ec2_sd_configs:
        - region: us-west-2
        port: 8351

        For additional references, see:

        * prometheus
            * https://godoc.org/github.com/prometheus/client_golang/prometheus
            * https://prometheus.io/docs/guides/go-application/
            * https://github.com/prometheus/client_golang/blob/master/prometheus/promhttp/http.go
        * go request routing
            * https://www.alexedwards.net/blog/a-recap-of-request-handling
            * https://www.alexedwards.net/blog/making-and-using-middleware
        * gorilla
            * https://github.com/gorilla/mux
    */
    prometheusMetricsPath = "/prometheusMetrics"
    prometheusMetricsPort = 8351
)


const (
    apiPath         = "/api-docs"
    readyCheckPath  = "/ready"
    aliveCheckPath  = "/alive"
    healthCheckPort = 8081
)

type Bootstrap struct {
    // used for detecting service flapping
    ServiceStartedCounter prometheus.Counter

    // service http server
    ServiceHTTPServer *http.Server

    // health check server
    HealthCheckHTTPServer *http.Server

    // prometheus metrics server
    PrometheusMetricsHTTPServer *http.Server
}

func (bs Bootstrap) ConfigureDefaults() *Bootstrap {
    serviceName := "{{goModule}}"
    defaultConfig := &config.DefaultConfig{}
    bs.parseConfig(defaultConfig)
    bs.configureLogging(serviceName, defaultConfig)

    servicesStartedCounter := bs.serviceStartedCounter(serviceName)
    serviceHTTPServer := bs.serviceHTTPServer(serviceName, defaultConfig)
    prometheusHTTPServer := bs.prometheusHTTPServer()
    bs.configureBugsnag(serviceName, defaultConfig.BugsnagReleaseStage, defaultConfig.BugsnagAPIKey)

    //healthCheckHTTPServer is set in main.go
    return &Bootstrap{
        ServiceStartedCounter:       servicesStartedCounter,
        ServiceHTTPServer:           serviceHTTPServer,
        PrometheusMetricsHTTPServer: prometheusHTTPServer,
    }
}

func (bs Bootstrap) configureLogging(serviceName string, defaultConfig *config.DefaultConfig) {
    log.SetLogger(log.GetLogger().With(log.KeyServiceName, serviceName))
    switch defaultConfig.LogLevel {
    case log.LoggingLevelDebug:
        log.SetLogger(log.GetLogger().SetLevel(log.LoggingLevelDebug))
    case log.LoggingLevelInfo:
        log.SetLogger(log.GetLogger().SetLevel(log.LoggingLevelInfo))
    case log.LoggingLevelWarn:
        log.SetLogger(log.GetLogger().SetLevel(log.LoggingLevelWarn))
    case log.LoggingLevelError:
        log.SetLogger(log.GetLogger().SetLevel(log.LoggingLevelError))
    default:
        panic(fmt.Sprintf("unknown logging level: %s", defaultConfig.LogLevel))
    }
}


func (bs Bootstrap) parseConfig(defaultConfig *config.DefaultConfig) {
    _, err := flags.Parse(defaultConfig)
    if err != nil {
        os.Exit(1)
    }
}

func (bs Bootstrap) serviceStartedCounter(serviceName string) prometheus.Counter {
    return promauto.NewCounter(prometheus.CounterOpts{
        Name: fmt.Sprintf("%s_svc_started_total", serviceName),
        Help: "The total number of times the service has started",
    })
}

func (bs Bootstrap) serviceHTTPServer(serviceName string, defaultConfig *config.DefaultConfig) *http.Server {
    var mw = tinym.NewTinyServiceMiddleware(serviceName, defaultConfig, defaultConfig.RateLimit, rateLimitExceededMessage).Init()
    return bs.ServiceHTTPServerWithMiddleware(mw.DecoratedHandler, defaultConfig.Port)
}


func (bs Bootstrap) ServiceHTTPServerWithMiddleware(mw MiddleWare, port int) *http.Server {
    router := NewRouter(mw)
    return &http.Server{
        Addr:         fmt.Sprintf("0.0.0.0:%d", port),
        WriteTimeout: time.Second * 15,
        ReadTimeout:  time.Second * 15,
        IdleTimeout:  time.Second * 60,
        Handler:      router,
    }
}

func apiHandler() http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        w.Header().Set("Content-Type", "application/json; charset=UTF-8")
        _, err := w.Write(oasAPI)
        if err != nil {
            http.Error(w, "Error serving api.json on root endpoint", http.StatusInternalServerError)
        } else {
            w.WriteHeader(http.StatusOK)
        }
    }
}


func (bs Bootstrap) HealthCheckHTTPServerWithHandlers(h service.Health) *http.Server {
    // limit healthchecks to 10 requests per second
    rateLimit := 10.0
    var mw = tinym.NewTinyServiceMiddleware("{{goModule}}health", nil, rateLimit, rateLimitExceededMessage).Init()

    r := mux.NewRouter()
    r.Handle(readyCheckPath, mw.DecoratedHandler(h.ReadyHandler()))
    r.Handle(aliveCheckPath, mw.DecoratedHandler(h.AliveHandler()))
    r.Handle(apiPath, mw.DecoratedHandler(apiHandler()))
    return &http.Server{
        Addr:         fmt.Sprintf("0.0.0.0:%d", healthCheckPort),
        WriteTimeout: time.Second * 15,
        ReadTimeout:  time.Second * 15,
        IdleTimeout:  time.Second * 60,
        Handler:      r,
    }
}

func (bs Bootstrap) prometheusHTTPServer() *http.Server {
    ph := promhttp.Handler()
    r := mux.NewRouter()
    r.Handle(prometheusMetricsPath, ph)
    return &http.Server{
        Addr:         fmt.Sprintf("0.0.0.0:%d", prometheusMetricsPort),
        WriteTimeout: time.Second * 15,
        ReadTimeout:  time.Second * 15,
        IdleTimeout:  time.Second * 60,
        Handler:      r,
    }
}

func (bs Bootstrap) configureBugsnag(serviceName string, bugsnagReleaseStage string, bugsnagAPIKey string) {
    bugsnag.Configure(bugsnag.Configuration{
        ProjectPackages: []string{"main", fmt.Sprintf("github.com/remitly/%s", serviceName)},
        ReleaseStage:    bugsnagReleaseStage,
        APIKey:          bugsnagAPIKey,
    })
}

func (bs Bootstrap) launchHTTPServer(srv *http.Server) {
    // Run in a goroutine so that it doesn't block.
    go func() {
        if err := srv.ListenAndServe(); err != nil {
            log.Error(err)
        }
    }()

    err := srv.Handler.(*mux.Router).Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
        tmpl, err := route.GetPathTemplate()
        if err == nil {
            log.With("addr", srv.Addr).Infof("route: %s", tmpl)
        } else {
            log.With("addr", srv.Addr).With("err", err).Errorf("error walking router")
        }
        return nil
    })
    if err != nil {
        log.With("addr", srv.Addr).With("err", err).Errorf("error walking router")
    }
}

func (bs *Bootstrap) LaunchServer() {
    var wait time.Duration

    log.Debug("verbose logging enabled...")
    log.Info("starting...")

    // prometheus metrics
    bs.launchHTTPServer(bs.PrometheusMetricsHTTPServer)

    // health check
    bs.launchHTTPServer(bs.HealthCheckHTTPServer)

    // service
    bs.launchHTTPServer(bs.ServiceHTTPServer)

    // increment the svc counter
    bs.ServiceStartedCounter.Inc()

    c := make(chan os.Signal, 1)
    // We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)
    // SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.
    signal.Notify(c, os.Interrupt)

    // Block until we receive our signal.
    <-c

    // Create a deadline to wait for.
    ctx, cancel := context.WithTimeout(context.Background(), wait)
    defer cancel()
    // Doesn't block if no connections, but will otherwise wait
    // until the timeout deadline.
    bs.ServiceHTTPServer.Shutdown(ctx)
    bs.PrometheusMetricsHTTPServer.Shutdown(ctx)
    bs.HealthCheckHTTPServer.Shutdown(ctx)
    // Optionally, you could run srv.Shutdown in a goroutine and block on
    // <-ctx.Done() if your application should wait for other services
    // to finalize based on context cancellation.
    log.Info("shutting down")
    os.Exit(0)
}

