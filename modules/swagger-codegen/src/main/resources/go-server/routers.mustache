{{>partial_header}}
package runtime

import (
    "github.com/remitly/tiny-logger-go/log"
    "net/http"
    "strings"

	"github.com/gorilla/mux"
    "{{goModule}}/service"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

type MiddleWare func(handler http.Handler) http.Handler

func NewRouter(middleWare MiddleWare) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = middleWare(handler)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
    log.With(log.KeyEndpoint, "index").
        WithServiceMetadata(log.ServiceMetaDataFromRequest(r, "Index endpoint left in for diagnostics")).
        Debugf("vars: %+v", mux.Vars(r))
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"{{{basePathWithoutHost}}}/",
		Index,
	},{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}

	Route{
		"{{operationId}}",
		strings.ToUpper("{{httpMethod}}"),
		"{{{basePathWithoutHost}}}{{{path}}}",
		service.{{operationId}},
	},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}
