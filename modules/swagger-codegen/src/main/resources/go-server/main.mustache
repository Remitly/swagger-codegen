{{>partial_header}}
package main

import (
    "github.com/remitly/tiny-logger-go/log"
    "github.com/remitly/tiny-logger-go/log/zero"

    "{{goModule}}/{{packageName}}/runtime"
    "{{goModule}}/service"
)


/*

Example of overriding the service middleware. Do this anywhere before calling LaunchServer()

    myPort := "9999"
    myMiddleware := func(next http.Handler) http.Handler {
        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            log.Debug(r.RequestURI)
            next.ServeHTTP(w, r)
        })
    }
    boot.ServiceHTTPServer = boot.ServiceHTTPServerWithMiddleware(myMiddleware, myPort)
*/
func main() {
    // choose a logger from tiny-logger-go/log {zero|logrus}
    log.SetLogger(zero.NewDefaultLogger())

    // configure the service (excepting the health check which is configured next)
    boot := runtime.Bootstrap{}.ConfigureDefaults()

    // configure the health check endpoints
    boot.HealthCheckHTTPServer = boot.HealthCheckHTTPServerWithHandlers(service.BasicHealth{})

    // if overriding the service middleware, do that here...

    // let's roll
    boot.LaunchServer()
}
