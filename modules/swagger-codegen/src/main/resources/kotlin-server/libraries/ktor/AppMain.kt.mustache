{{>licenseInfo}}
package {{packageName}}

import com.bugsnag.Bugsnag
import com.remitly.ktor.BugsnagIntegration
import com.remitly.ktor.BugsnagIntegration.InstallBugsnag
import com.remitly.ktor.instrumentedServer
import com.remitly.ktor.MetricsIntegration
import com.remitly.ktor.TracingIntegration
import io.ktor.application.ApplicationStopping
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.client.engine.apache.Apache
import io.ktor.client.HttpClient
import io.ktor.features.AutoHeadResponse
import io.ktor.features.ContentNegotiation
import io.ktor.features.DefaultHeaders
import io.ktor.features.StatusPages
import io.ktor.gson.GsonConverter
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.response.respond
import io.ktor.routing.routing
import io.ktor.server.netty.Netty
import io.ktor.server.netty.NettyApplicationEngine

{{#generateApis}}
import {{apiPackage}}.*
{{/generateApis}}

{{#imports}}import {{import}}
{{/imports}}



object HTTP {
    val client = HttpClient(Apache)
}

object BSnag {
    val client = Bugsnag("YourKey").apply{
        // Configure your client
    }
}

object Config {
    const val serviceName = "SERVICE_NAME"
    const val adminPort = 9080
    const val svcPort = 8080
}

object Application {

    @JvmStatic
    fun main(args: Array<String>) {

        val ktor = instrumentedServer(
            factory = Netty,
            port = Config.svcPort,
            bugsnag = bugsnagIntegration(),
            tracing = tracingIntegration(),
            metrics = metricsIntegration(),
            configureApplicationEngine = NettyApplicationEngine.Configuration::instrumentServer
        ) {
            install(StatusPages) {
                exception<Throwable> {
                    call.respond(HttpStatusCode.InternalServerError)
                }
            }
            install(DefaultHeaders)
            install(ContentNegotiation) {
                register(ContentType.Application.Json, GsonConverter())
            }
            install(AutoHeadResponse)
            routing {
                {{#apiInfo}}
                {{#apis}}
                {{#operations}}
                {{classname}}()
                {{/operations}}
                {{/apis}}
                {{/apiInfo}}
            }

            environment.monitor.subscribe(ApplicationStopping) {
                HTTP.client.close()
            }
        }

        ktor.start(wait = true)
    }
}

fun NettyApplicationEngine.Configuration.instrumentServer() {
    // TODO
}

fun metricsIntegration(): MetricsIntegration {
    //return MetricsIntegration.InstallMetrics(Config.adminPort)
    return MetricsIntegration.IgnoreMetrics
}

fun tracingIntegration(): TracingIntegration {
    //return TracingIntegration.InstallTracing(Config.serviceName)
    return TracingIntegration.IgnoreTracing
}

fun bugsnagIntegration(): BugsnagIntegration {
    //return InstallBugsnag(BSnag.client)
    return BugsnagIntegration.IgnoreBugsnag
}

