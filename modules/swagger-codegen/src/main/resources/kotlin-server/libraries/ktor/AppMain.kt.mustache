{{>licenseInfo}}
package {{packageName}}

import com.codahale.metrics.*
import com.typesafe.config.ConfigFactory
import io.ktor.application.*
import io.ktor.application.*
import io.ktor.client.*
import io.ktor.client.engine.apache.Apache
import io.ktor.client.features.json.*
import io.ktor.client.features.logging.*
import io.ktor.client.HttpClient
import io.ktor.client.request.*
import io.ktor.features.*
import io.ktor.gson.GsonConverter
import io.ktor.html.*
import io.ktor.http.*
import io.ktor.http.ContentType
import io.ktor.jackson.*
import io.ktor.locations.*
import io.ktor.metrics.*
import io.ktor.request.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.routing.*
import java.net.URL
import java.util.concurrent.*
import kotlinx.html.*
import org.slf4j.event.*

{{#generateApis}}
import {{apiPackage}}.*
{{/generateApis}}

{{#imports}}import {{import}}
{{/imports}}

object HTTP {
    val client = HttpClient(Apache)
}

fun main(args: Array<String>): Unit = io.ktor.server.netty.EngineMain.main(args)

@Suppress("unused") // Referenced in application.conf
@kotlin.jvm.JvmOverloads
fun Application.module(testing: Boolean = false) {
    install(DefaultHeaders)
    install(Metrics) {
        val reporter = Slf4jReporter.forRegistry(registry)
            .outputTo(log)
            .convertRatesTo(TimeUnit.SECONDS)
            .convertDurationsTo(TimeUnit.MILLISECONDS)
            .build()
        reporter.start(10, TimeUnit.SECONDS)
    }
    install(ContentNegotiation) {
        register(ContentType.Application.Json, GsonConverter())
    }
    install(AutoHeadResponse)   // see http://ktor.io/features/autoheadresponse.html
    install(Locations)          // see http://ktor.io/features/locations.html
    install(Routing) {
{{#apiInfo}}
    {{#apis}}
        {{#operations}}
        {{classname}}()
        {{/operations}}
    {{/apis}}
{{/apiInfo}}
    }

    environment.monitor.subscribe(ApplicationStopping){
        HTTP.client.close()
    }
}
