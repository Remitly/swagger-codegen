{{>licenseInfo}}
package {{packageName}}

import com.bugsnag.Bugsnag
import com.natpryce.konfig.CommandLineOption
import com.natpryce.konfig.Configuration
import com.natpryce.konfig.Key
import com.natpryce.konfig.stringType
import com.remitly.ktor.BugsnagIntegration
import com.remitly.ktor.BugsnagIntegration.InstallBugsnag
import com.remitly.ktor.MetricsIntegration
import com.remitly.ktor.TracingIntegration
import com.remitly.ktor.instrumentedServer
import com.remitly.logging.LogLevel
import com.remitly.logging.LoggerFactory
import com.remitly.logging.getLogger
import com.remitly.logging.getLogger
import io.ktor.application.ApplicationStopping
import io.ktor.application.call
import io.ktor.application.install
import io.ktor.client.HttpClient
import io.ktor.client.engine.apache.Apache
import io.ktor.features.ContentNegotiation
import io.ktor.features.StatusPages
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.jackson.JacksonConverter
import io.ktor.response.respond
import io.ktor.routing.routing
import io.ktor.server.netty.Netty
import io.ktor.server.netty.NettyApplicationEngine

{{#generateApis}}
import {{apiPackage}}.*
{{/generateApis}}
import {{packageName}}.generated.DefaultConfig

{{#imports}}import {{import}}
{{/imports}}


object HTTP {
    val client = HttpClient(Apache)
}

object Config {
    const val serviceName = "{{artifactId}}"
    lateinit var configuration: Configuration
}

fun customConfig() : Array<CommandLineOption> {
    val configExample = "example"
    val keyExample = Key(configExample, stringType)
    return arrayOf(
        CommandLineOption(keyExample, "example", "e", "Replace with a real config")
    )
}

object Application {
    @JvmStatic
    fun main(args: Array<String>) {

        Config.configuration = DefaultConfig(args, customConfig(), Config.serviceName).configuration

        setLogLevel()
        val logger = getLogger()

        val ktor = instrumentedServer(
            factory = Netty,
            port = Config.configuration[DefaultConfig.keyServicePort],
            bugsnag = bugsnagIntegration(Config.configuration[DefaultConfig.keyBugsnagApiKey], Config.configuration[DefaultConfig.keyBugsnagReleaseStage]),
            tracing = tracingIntegration(),
            metrics = metricsIntegration(),
            configureApplicationEngine = NettyApplicationEngine.Configuration::instrumentServer
        ) {
            logger.debug("installing status pages", fields = { mapOf("svc" to Config.serviceName) })
            install(StatusPages) {
                exception<Throwable> {
                    call.respond(HttpStatusCode.InternalServerError)
                }
            }
            logger.debug("installing content negotiation", fields = { mapOf("svc" to Config.serviceName) })
            install(ContentNegotiation) {
                register(ContentType.Application.Json, JacksonConverter())
            }
            logger.debug("installing routing", fields = { mapOf("svc" to Config.serviceName) })
            routing {
                {{#apiInfo}}
                {{#apis}}
                {{#operations}}
                {{classname}}()
                {{/operations}}
                {{/apis}}
                {{/apiInfo}}
            }

            environment.monitor.subscribe(ApplicationStopping) {
                HTTP.client.close()
            }
        }

        logger.debug("starting...", fields = { mapOf("svc" to Config.serviceName) })
        ktor.start(wait = true)
    }
    private fun setLogLevel() {
        when (Config.configuration[DefaultConfig.keyLogLevel]) {
            "debug" -> LoggerFactory.setLogLevel(LogLevel.DEBUG)
            "info" -> LoggerFactory.setLogLevel(LogLevel.INFO)
            "warn" -> LoggerFactory.setLogLevel(LogLevel.WARN)
            "error" -> LoggerFactory.setLogLevel(LogLevel.ERROR)
            "fatal" -> LoggerFactory.setLogLevel(LogLevel.FATAL)
            else -> LoggerFactory.setLogLevel(LogLevel.INFO)
        }
    }
}

fun NettyApplicationEngine.Configuration.instrumentServer() {
    // TODO
}

fun metricsIntegration(): MetricsIntegration {
    return MetricsIntegration.InstallMetrics(Config.configuration[DefaultConfig.keyAdminPort])
}

fun tracingIntegration(): TracingIntegration {
    return TracingIntegration.InstallTracing(Config.serviceName)
}

fun bugsnagIntegration(key: String, stage: String): BugsnagIntegration {
    val client = Bugsnag(key).apply{
        this.setReleaseStage(stage)
    }
    return InstallBugsnag(client)
}

